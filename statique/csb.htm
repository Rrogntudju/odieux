<html>
    <head>
      <meta charset="utf-8"/>
      <meta name="viewport" content="width=device-width, initial-scale=1">
      <script src="dist/knockout-3.5.1.js"></script>
      <link rel="stylesheet" href="dist/w3.css">
      <link rel="icon" type="image/x-icon" href="dist/favicon.ico"/>
      <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css">
      <style>
        .middle {
          vertical-align: middle
        }
      </style>
    </head>

    <body>
      <header>
        <div class="w3-container w3-round w3-teal">
          <div class="w3-container w3-cell middle">C'est si bon</div>

          <div class="w3-container w3-cell w3-border-left middle">
            <span data-bind="hidden: player() == 'Playing'" class="w3-button w3-green w3-round-large"><i class="fa fa-play"></i></span>
            <span data-bind="visible: player() == 'Playing'" class="w3-button w3-green w3-round-large"><i class="fa fa-pause"></i></span>
            <span class="w3-button w3-green w3-round-large"><i class="fa fa-stop"></i></span>
          </div>

          <div class="w3-container w3-cell middle">
            <span class="w3-button w3-green w3-round-large"><i class="fa fa-volume-down"></i></span>
            <span class="w3-badge w3-white" data-bind="text: page"></span>
            <span class="w3-button w3-green w3-round-large"><i class="fa fa-volume-up"></i></span>
          </div>

          <div class="w3-container w3-cell middle">
            <span data-bind="text: enLecture"></span>
          </div>
        </div>
      </header>

      <div class= "w3-container" data-bind="foreach: épisodes">
        <div class="w3-card w3-round w3-margin-top w3-margin-bottom w3-text-teal w3-btn w3-block" 
             data-bind="text: titre, click: $parent.play">
        </div>
      </div>

      <footer>
        <div class="w3-container w3-round w3-teal">
          <div class="w3-container w3-cell middle">
            <span>Page <span class="w3-badge w3-white" data-bind="text: page"></span></span>
          </div>

          <div class="w3-container w3-cell middle">
            <span class="w3-button w3-green w3-round-large">-10</span>
            <span class="w3-button w3-green w3-round-large">-1</span>
            <span class="w3-button w3-green w3-round-large">Page <span data-bind="text: page"></span></span>
            <span class="w3-button w3-green w3-round-large">+1</span>
            <span class="w3-button w3-green w3-round-large">+10</span>
          </div>

          <div class="w3-container w3-cell w3-text-orange middle">
            <span data-bind="text: message"></span>
          </div>
        </div>
      </footer>
      
      <script>
        document.onreadystatechange = function () {
          csb.command("State", "");
          if (csb.épisodes().length == 0) {
            csb.command("Page", "1");
          }
        }

        function csbViewModel() {
          var self = this;
          /*
          player: ko.observable(""),
          volume: ko.observable(""),
          page: ko.observable(""),
          épisodes: ko.observableArray([]),
          message: ko.observable(""),
          enLecture: ko.observable(""),
          */
          self.player = ko.observable("Stopped");
          self.volume = ko.observable("10");
          self.page = ko.observable("1");
          self.épisodes = ko.observableArray([
            { titre: 'Toune 1', media_id: '00000000'  },
            { titre: 'Toune 2', media_id: '00000000'  },
            { titre: 'Toune 2', media_id: '00000000'  },
            { titre: 'Toune 4', media_id: '00000000'  },
            { titre: 'Toune 5', media_id: '00000000'  },
          ]);
          self.message = ko.observable("BEUH!");
          self.enLecture = ko.observable("Toune 1");
          
          self.play = function(épisode) {
            self.command("Start", épisode);
          }; 

          self.command = function(verb, param) {
            self.message("");

            const headers = new Headers({
                'Content-Type': 'application/json',
            });

            var body;
            switch (verb) {
              case "Start":
                body = '{ "Start": "' + param + '" }'
                break;
              case "Page":
                body = '{ "Page": ' + param + ' }'
                break;
              default:
                body = '{ "' + verb + '": null }'
            }

            const request = new Request('/command', {
              method: 'POST',
              headers: headers,
              cache: 'no-cache',
              redirect: 'error',
              body: body
            });

            fetch(request)
            .then(response => response.json())
            .then(data => {
              self.player(data.player);
              self.volume(data.volume.toString());
              self.page(data.page.toString());
              self.épisodes.removeAll();
              for (const épisode of data.episodes) {
                  self.épisodes.push(épisode)
              }
              self.message(data.message);
              self.enLecture(data.enLecture);
            })
            .catch((error) => {
              message = "Échec de fetch: " + error;
              console.log(message);
              self.message(message);
            });
          };
        }
        
        var csb = new csbViewModel();
        ko.applyBindings(csb);
      </script>
    </body>
</html>