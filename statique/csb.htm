<html>
    <head>
        <meta charset="utf-8"/>
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <script src="dist/knockout-3.5.1.js"></script>
        <link rel="stylesheet" href="dist/w3.css">
        <link rel="icon" type="image/x-icon" href="dist/favicon.ico"/>
        <style>
          header {
            position: sticky; top: 0; left: 0; width: 100%;
          }
          footer {
            position: sticky; bottom: 0; left: 0; width: 100%;
          }
        </style>
    </head>

    <body>
      <header>
        <div class="w3-card w3-round w3-teal header">
          <div class="w3-container w3-cell">

          </div>
        </div>
      </header>
      <div class="w3-container" data-bind="foreach: épisodes">
        <div class="w3-panel w3-round w3-text-teal">
          <p  data-bind="text: titre"></p>
          <button class="w3-button w3-round w3-hover-amber w3-margin-top" data-bind="click: command('Start', media_id), enable: enableUserInfos">

          </button>
        </div>
      </div>
      <footer>
        <div class="w3-card w3-round w3-teal footer">
          <div class="w3-container w3-cell">
            
          </div>
        </div>
      </footer>
      
      <script>
          document.onreadystatechange = function () {
            csbViewModel.command("State", "");
            if (csbViewModel.épisodes().len() == 0) {
              csbViewModel.command("Page", "1")
            }
          }

          const csbViewModel = {
              player: ko.observable(""),
              volume: ko.observable(""),
              page: ko.observable(""),
              épisodes: ko.observableArray([ /* { titre: 'blabla', media_id: '00000000'  } */ ]),
              message: ko.observable(""),

              enableCommand: ko.observable(false),

              command: function(verb, param) {
                  this.message("");

                  const headers = new Headers({
                      'Content-Type': 'application/json',
                  });

                  switch (verb) {
                    case "Start":
                      body = '{ "Start": "' + param + '" }'
                      break;
                    case "Page":
                      body = '{ "Page": ' + param + ' }'
                      break;
                    default:
                      body = '{ "' + verb + '": null }'
                  }
                  const request = new Request('/command', {
                      method: 'POST',
                      headers: headers,
                      cache: 'no-cache',
                      redirect: 'error',
                      body: body
                  });

                  fetch(request)
                  .then(response => response.json())
                  .then(data => {
                          this.player(data.player);
                          this.volume(data.volume.toString());
                          this.page(data.page.toString());
                          this.épisodes.removeAll();
                          for (const épisode of data.episodes) {
                              this.épisodes.push(épisode)
                          }
                          this.message(data.nessage);
                      }
                  )
                  .catch((error) => {
                      message = "Échec de fetch: " + error;
                      console.log(message);
                      this.message(message);
                  });
              }
          }
          
          ko.applyBindings(csbViewModel);
      </script>
    </body>
</html>