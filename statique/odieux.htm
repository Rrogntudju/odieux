<!DOCTYPE html>
<html>
    <head>
      <meta charset="utf-8"/>
      <meta name="viewport" content="width=device-width, initial-scale=1">
      <meta name="apple-mobile-web-app-capable" content="yes">
      <script src="dist/knockout-3.5.1.js"></script>
      <link rel="stylesheet" href="dist/css/w3.css">
      <link rel="icon" type="image/x-icon" href="dist/favicon.ico"/>
      <link rel="apple-touch-icon" type="image/x-icon" href="dist/favicon.ico"/>
      <link rel="stylesheet" href="dist/css/all.min.css">
      <style>
        @media (prefers-color-scheme: dark) {
          .mode {
              background-color: #202020;
          }
        }
        .scroll-menu {
          white-space: nowrap;
          overflow-x: auto;
          display: flex;
        }
        .menu-item {
          cursor: default;
          padding-right: 2em;
        }
        .selected {
          font-weight: bold;
          text-decoration: overline;
          pointer-events: none;
        }
      </style>
    </head>

    <body class="mode">
      <header>
        <div class="w3-container w3-teal scroll-menu" data-bind="foreach: programmes">
          <div class="w3-cell menu-item">
            <h4 data-bind="text: titre, attr: { id: 'prog_' + i }, click: $parent.selProg, css: { selected: $parent.prog() == i }"></h4>
          </div>
        </div>

        <div class="w3-container w3-teal">
          <p></p>
          <div class="w3-cell">
            <span class="w3-button w3-green w3-round-large"
                  data-bind="hidden: player() == 'Playing', css: { 'w3-disabled': playerOff }, click: toggle">
              <i class="fa fa-play"></i>
            </span>
            <span class="w3-button w3-green w3-round-large"
                  data-bind="hidden: player() != 'Playing', css: { 'w3-disabled': playerOff }, click: toggle">
              <i class="fa fa-pause"></i>
            </span>
            <span class="w3-button w3-green w3-round-large"
                  data-bind="css: { 'w3-disabled': playerOff }, click: stop">
              <i class="fa fa-stop"></i>
            </span>
            <span class="w3-button w3-green w3-round-large"
                  data-bind="click: random">
              <i class="fa fa-random"></i>
            </span>
            <span class="w3-button w3-green w3-round-large"
                  data-bind="click: live">
              <i class="fa fa-microphone"></i>
            </span>
          </div>
          <div class="w3-cell" style="padding-left: 2em">
            <span class="w3-button w3-green w3-round-large"
                  data-bind="css: { 'w3-disabled': playerOff }, click: setVolume.bind($root, -1)">
              <i class="fa fa-volume-down"></i>
            </span>
            <span class="w3-badge w3-white" data-bind="text: volume, css: { 'w3-disabled': playerOff }"></span>
            <span class="w3-button w3-green w3-round-large"
                  data-bind="css: { 'w3-disabled': playerOff }, click: setVolume.bind($root, 1)">
              <i class="fa fa-volume-up"></i>
            </span>
          </div>
        </div>

        <div class="w3-container w3-teal" style="padding-top: 1em;">
          <div data-bind="using: programme" style="font-weight: bold;">
            <span data-bind="text: titre"></span>
          </div>
          <div data-bind="using: enLecture">
            <span data-bind="html: titre"></span>
          </div>
        </div>
      </header>

      <div class= "w3-container" data-bind="foreach: épisodes">
        <div class="w3-card w3-round w3-margin-top w3-margin-bottom w3-text-teal w3-btn w3-block" style="white-space: normal"
             data-bind="html: titre, click: $parent.play">
        </div>
      </div>

      <footer>
        <div class="w3-container w3-teal" style="display: flex">
          <p>Page <span class="w3-badge w3-white" data-bind="text: page"></span></p>
          <div class="w3-cell" style="padding-left: 2em">
            <p><span class="w3-button w3-green w3-round-large"
              onmousedown="ohdio.minusSpin(event)" onmouseup="ohdio.stopSpin()" ontouchstart="ohdio.minusSpin(event)" ontouchend="ohdio.stopSpin()">
              <i class="fa fa-solid fa-minus"></i>
            </span>
            <span class="w3-button w3-green w3-round-large" data-bind="click: setPage">Page <span data-bind="text: spinPage"></span></span>
            <span class="w3-button w3-green w3-round-large"
              onmousedown="ohdio.plusSpin(event)" onmouseup="ohdio.stopSpin()" ontouchstart="ohdio.plusSpin(event)" ontouchend="ohdio.stopSpin()">
              <i class="fa fa-solid fa-plus"></i>
            </span>
            <span class="fa fa-spinner fa-spin" data-bind="visible: longCommand"></span></p>
          </div>
        </div>

        <div class="w3-container w3-teal">
          <div class="w3-text-orange" data-bind="text: message"></div>
        </div>
      </footer>

      <script>
        function ohdioViewModel() {
          let self = this;
          self.player = ko.observable("Stopped");
          self.volume = ko.observable(2);
          self.page = ko.observable(0);
          self.prog = ko.observable(0);
          self.épisodes = ko.observableArray([]);
          self.message = ko.observable("");
          self.enLecture = ko.observable({titre: "", media_id: ""});
          self.programme = ko.observable({titre: ""});
          self.playerOff = ko.computed(function () {
            return self.enLecture().titre == "";
          });
          self.longCommand = ko.observable(false);
          self.programmes = [
            {titre: "C'est si bon", i: 0},
            {titre: "C'est toute une musique", i: 1},
            {titre: "Moment classique", i: 2},
            {titre: "Quand le jazz est là", i: 3},
          ];
          self.progUrl = [
            "https://services.radio-canada.ca/neuro/sphere/v1/audio/apps/products/programmes-v2/cestsibon/{}?context=web&pageNumber={}",
            "https://services.radio-canada.ca/neuro/sphere/v1/audio/apps/products/programmes-v2/touteunemusique/{}?context=web&pageNumber={}",
            "https://services.radio-canada.ca/neuro/sphere/v1/audio/apps/products/programmes-v2/momentclassique/{}?context=web&pageNumber={}",
            "https://services.radio-canada.ca/neuro/sphere/v1/audio/apps/products/programmes-v2/quandlejazzestla/{}?context=web&pageNumber={}",
          ];
          self.progPages = [13, 38, 14, 38];
          self.spinPage = ko.observable(1);

          self.refresh = async function () {
            await self.command("State", null);
            if (self.page() == 0) {
              self.setPage();
            }
          }

          self.play = function (épisode) {
            self.longCommand(true);
            self.command("Start", épisode);
          }

          self.stop = function () {
            self.command("Stop", null);
          }

          self.random = function () {
            self.longCommand(true);
            self.command("Random", {page: self.progPages[self.prog()], prog: self.prog(), url: self.progUrl[self.prog()]});
          }

          self.live = function () {
            self.longCommand(true);
            self.command("Start", {titre: "En direct", media_id: ""});
          }

          self.setPage = function () {
            self.longCommand(true);
            self.command("Page", {page: self.spinPage(), prog: self.prog(), url: self.progUrl[self.prog()]});
          }

          self.selProg = function (programme) {
            self.setProg(programme.i);
            let menuItem = document.getElementById("prog_" + programme.i);
            menuItem.scrollIntoView({behavior: "smooth"});
          }

          self.setProg = function (prog) {
            self.prog(prog);
            self.page(1);
            self.spinPage(1);
            self.setPage();
          }

          self.toggle = function () {
            if (self.player() == "Playing") {
              self.command("Pause", null);
            } else if (self.player() == "Paused") {
              self.command("Play", null);
             }
          }

          self.setVolume = function (offset) {
            let vol = self.volume() + offset;
            if (vol < 0) {
              vol = 0;
            } else if (vol > 10) {
              vol = 10;
            }
            self.command("Volume", vol);
          }

          self.setSpinPage = function (offset) {
            let p = self.spinPage() + offset;
            let pages = self.progPages[self.prog()];
            if (p < 1) {
              p = 1;
            } else if (p > pages) {
              p = pages;
            }
            self.spinPage(p);
          }

          self.startSpin = async function (offset) {
            self.setSpinPage(offset);
            await new Promise(r => {
              self.handle1 = setTimeout(r, 400);
            });
            self.handle2 = setInterval(offset => {
              self.setSpinPage(offset);
            }, 30, offset);
          }

          self.stopSpin = function () {
            clearTimeout(self.handle1);
            clearInterval(self.handle2);
          }

          self.minusSpin = function (event) {
            event.preventDefault();
            self.startSpin(-1);
          }

          self.plusSpin = function (event) {
            event.preventDefault();
            self.startSpin(1);
          }

          self.command = async function (verb, param) {
            const headers = new Headers({
                'Content-Type': 'application/json',
            });

            let command = {};
            command[verb] = param;

            const request = new Request('/command', {
              method: 'POST',
              headers: headers,
              cache: 'no-cache',
              redirect: 'error',
              body: JSON.stringify(command),
            });

            await fetch(request)
            .then(response => response.json())
            .then(data => {
              self.player(data.player);
              self.volume(data.volume);
              self.page(data.page);
              if (self.prog() != data.prog) {
                self.prog(data.prog);
                let menuItem = document.getElementById("prog_" + data.prog);
                menuItem.scrollIntoView({behavior: "smooth"});
              }
              self.épisodes.removeAll();
              ko.utils.arrayPushAll(self.épisodes, data.episodes);
              self.enLecture(data.en_lecture);
              if (data.en_lecture.titre == "" || data.en_lecture.titre == "En direct") {
                self.programme({titre: ""});
              } else {
                self.programme({titre: self.programmes[data.en_lecture_prog].titre});
              }
              self.message(data.message);
              self.longCommand(false);
            })
            .catch(error => {
              self.message(error);
              self.longCommand(false);
            });
          };
        }

        let ohdio = new ohdioViewModel();
        ko.applyBindings(ohdio);
        ohdio.refresh();
        setInterval(() => {
          ohdio.refresh();
        }, 5000);
      </script>
    </body>
</html>