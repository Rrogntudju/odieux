<!DOCTYPE html>
<html>
    <head>
      <meta charset="utf-8"/>
      <meta name="viewport" content="width=device-width, initial-scale=1">
      <script src="dist/knockout-3.5.1.js"></script>
      <link rel="stylesheet" href="dist/css/w3.css">
      <link rel="icon" type="image/x-icon" href="dist/favicon.ico"/>
      <link rel="apple-touch-icon" type="image/x-icon" href="dist/favicon.ico"/>
      <link rel="stylesheet" href="dist/css/all.min.css">
      <style>
        @media (prefers-color-scheme: dark) {
          body.mode {
              background-color: #202020;
          }
        }
        .scroll-menu {
          white-space: nowrap;
          overflow-x: auto;
          display: flex;
          border: 1px solid #ccc;
          padding: 10px;
        }
        .selected {
          font-weight: bold;
        }
      </style>
    </head>

    <body class="mode">
      <header>
        <div class="w3-container w3-teal scroll-menu">
          <div class="w3-cell" data-bind="css: { 'selected': prog() == 0 }, setProg($data, 0)">
            <h4>C'est si bon</h4>
          </div>
          <div class="w3-cell" data-bind="css: { 'selected': prog() == 1 },click: setProg($data, 1)">
            <h4>Toute une musique</h4>
          </div>
        </div>

        <div class="w3-container w3-teal">
          <div class="w3-cell">
            <span class="w3-button w3-green w3-round-large"
                  data-bind="hidden: player() == 'Playing', css: { 'w3-disabled': playerOff }, click: toggle">
              <i class="fa fa-play"></i>
            </span>
            <span class="w3-button w3-green w3-round-large"
                  data-bind="hidden: player() != 'Playing', css: { 'w3-disabled': playerOff }, click: toggle">
              <i class="fa fa-pause"></i>
            </span>
            <span class="w3-button w3-green w3-round-large"
                  data-bind="css: { 'w3-disabled': playerOff }, click: stop">
              <i class="fa fa-stop"></i>
            </span>
            <span class="w3-button w3-green w3-round-large"
                  data-bind="click: random">
              <i class="fa fa-random"></i>
            </span>
            <span class="w3-button w3-green w3-round-large"
                  data-bind="click: live">
              <i class="fa fa-microphone"></i>
            </span>
          </div>
          <div class="w3-cell" style="padding-left: 16px">
            <span class="w3-button w3-green w3-round-large"
                  data-bind="css: { 'w3-disabled': playerOff }, click: setVolume.bind($data, -1)">
              <i class="fa fa-volume-down"></i>
            </span>
            <span class="w3-badge w3-white" data-bind="text: volume, css: { 'w3-disabled': playerOff }"></span>
            <span class="w3-button w3-green w3-round-large"
                  data-bind="css: { 'w3-disabled': playerOff }, click: setVolume.bind($data, 1)">
              <i class="fa fa-volume-up"></i>
            </span>
          </div>
        </div>

        <div class="w3-container w3-teal">
          <div data-bind="using: enLecture">
            <p data-bind="html: titre"></p>
          </div>
        </div>
      </header>

      <div class= "w3-container" data-bind="foreach: épisodes">
        <div class="w3-card w3-round w3-margin-top w3-margin-bottom w3-text-teal w3-btn w3-block" style="white-space: normal"
             data-bind="html: titre, click: $parent.play">
        </div>
      </div>

      <footer>
        <div class="w3-container w3-teal">
          <p>Page <span class="w3-badge w3-white" data-bind="text: page"></span></p>
        </div>

        <div class="w3-container w3-teal">
          <div class="w3-cell">
            <span class="w3-button w3-green w3-round-large" data-bind="click: setSpinPage.bind($data, -10)">-10</span>
            <span class="w3-button w3-green w3-round-large" data-bind="click: setSpinPage.bind($data, -1)">-1</span>
            <span class="w3-button w3-green w3-round-large" data-bind="click: setPage">Page <span data-bind="text: spinPage"></span></span>
            <span class="w3-button w3-green w3-round-large" data-bind="click: setSpinPage.bind($data, 1)">+1</span>
            <span class="w3-button w3-green w3-round-large" data-bind="click: setSpinPage.bind($data, 10)">+10</span>
          </div>
        </div>

        <div class="w3-cell" data-bind="visible: longCommand">
          <h4><i class="fa fa-spinner fa-spin" style="color: white"></i></h4>
        </div>

        <div class="w3-container w3-teal">
          <div class="w3-text-orange">
            <p data-bind="text: message"></p>
          </div>
        </div>
      </footer>

      <script>
        function ohdioViewModel() {
          let self = this;
          self.player = ko.observable("Stopped");
          self.volume = ko.observable(2);
          self.page = ko.observable(0);
          self.prog = ko.observable(0);
          self.épisodes = ko.observableArray([]);
          self.message = ko.observable("");
          self.enLecture = ko.observable({titre: "", media_id: ""});
          self.playerOff = ko.computed(function () {
            return self.enLecture().titre == "";
          });
          self.longCommand = ko.observable(false);
          self.progUrl = [
            "https://services.radio-canada.ca/neuro/sphere/v1/audio/apps/products/programmes-v2/cestsibon/{}?context=web&pageNumber={}",
            "https://services.radio-canada.ca/neuro/sphere/v1/audio/apps/products/programmes-v2/touteunemusique/{}?context=web&pageNumber={}"
          ];
          self.progPages = [13, 38];
          self.spinPage = ko.observable(1);

          self.refresh = function () {
            self.command("State", null);
            setTimeout(() => {
              if (self.page() == 0) {
                self.setPage();
            }}, 200);
          }

          self.play = function(épisode) {
            self.longCommand(true);
            self.command("Start", épisode);
          }

          self.stop = function () {
            self.command("Stop", null);
          }

          self.random = function () {
            self.longCommand(true);
            self.command("Random", {page: self.pages, url: self.url});
          }

          self.live = function () {
            self.longCommand(true);
            self.command("Start", {titre: "En direct", media_id: ""});
          }

          self.setPage = function () {
            self.longCommand(true);
            self.command("Page", {page: self.spinPage(), prog: self.prog(), url: self.progUrl[self.prog()]});
          }

          self.setProg = function (prog) {
            self.prog(prog);
            self.page(1);
            self.spinPage(1);
            self.longCommand(true);
            self.command("Page", {page: self.spinPage(), url: self.progUrl[self.prog]});
          }

          self.toggle = function () {
            if (self.player() == "Playing") {
              self.command("Pause", null);
            } else if (self.player() == "Paused") {
              self.command("Play", null);
             }
          }

          self.setVolume = function (offset) {
            let vol = self.volume() + offset;
            if (vol < 0) {
              vol = 0;
            } else if (vol > 10) {
              vol = 10;
            }
            self.command("Volume", vol);
          }

          self.setSpinPage = function (offset) {
            let p = self.spinPage() + offset;
            if (p < 1) {
              p = 1;
            } else if (p > self.pages) {
              p = self.pages;
            }
            self.spinPage(p);
          }

          self.command = function(verb, param) {
            const headers = new Headers({
                'Content-Type': 'application/json',
            });

            let command = {};
            command[verb] = param;

            const request = new Request('/command', {
              method: 'POST',
              headers: headers,
              cache: 'no-cache',
              redirect: 'error',
              body: JSON.stringify(command),
            });

            fetch(request)
            .then(response => response.json())
            .then(data => {
              self.player(data.player);
              self.volume(data.volume);
              self.page(data.page);
              self.prog(data.prog);
              self.épisodes.removeAll();
              ko.utils.arrayPushAll(self.épisodes, data.episodes);
              self.message(data.message);
              self.enLecture(data.en_lecture);
              self.longCommand(false);
            })
            .catch((error) => {
              self.message(error);
              self.longCommand(false);
            });
          };
        }

        let ohdio = new ohdioViewModel();
        ko.applyBindings(ohdio);
        ohdio.refresh();
        setInterval(() => {
          ohdio.refresh();
        }, 5000);
      </script>
    </body>
</html>